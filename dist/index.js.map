{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import request from 'request';\nimport uuid from 'uuid';\nimport querystring from 'querystring';\nimport { default as utils } from './utils';\nimport config from './config';\nimport url from 'url';\nimport { debug as createDebugger } from 'debug';\n\nconst debug = createDebugger('universal-analytics');\n\nconst enum MetricType {\n  PAGEVIEW = 'pageview',\n}\ntype ArbitraryParams = { [key: string]: string };\ntype ArbitraryParamsBatch = ArbitraryParams[];\ntype Callback = (error?: Error, count?: number) => void;\ntype TrackingID = string;\ntype ClientID = string;\ntype UserID = string;\ntype VisitorContext = { [key: string]: string };\ntype PersistentParams = { [key: string]: string };\ntype VisitorOptions = {\n  tid?: TrackingID;\n  cid?: ClientID;\n  uid?: UserID;\n  hostname?: string;\n  path?: string;\n  https?: boolean;\n  enableBatching?: boolean;\n  batchSize?: number;\n  debug?: boolean;\n  strictCidFormat?: boolean;\n  requestOptions?: { [key: string]: any };\n  headers?: { [key: string]: string };\n};\nexport type PageviewParams = ArbitraryParams & {\n  /**\n   * Document Path\n   * The path portion of the page URL. Should begin with '/'.\n   * Max length: 2048 Bytes\n   */\n  dp?: string;\n  /**\n   * Document Host Name\n   * Specifies the hostname from which content was hosted.\n   * Max length: 100 Bytes\n   */\n  dh?: string;\n  /**\n   * Document Title\n   * The title of the page / document.\n   * Max length: 1500 Bytes\n   */\n  dt?: string;\n  /**\n   * Document location URL\n   * Use this parameter to send the full URL (document location) of the page on which content resides.\n   * Max length: 2048 Bytes\n   */\n  dl?: string;\n};\n\nexport function init(options: VisitorOptions) {\n  return new Visitor(options);\n}\n\nexport class Visitor {\n  private readonly tid: TrackingID | undefined;\n  private readonly cid: ClientID | undefined;\n  private readonly uid: UserID | undefined;\n\n  constructor(\n    private readonly options: VisitorOptions = {},\n    private context: VisitorContext = {},\n    private persistentParams: PersistentParams = {},\n    private readonly queue: ArbitraryParams[] = [],\n  ) {\n    if (!options) {\n      return;\n    }\n    if (options.hostname != null) {\n      config.hostname = options.hostname;\n    }\n\n    if (options.path != null) {\n      config.path = options.path;\n    }\n\n    if (options.enableBatching != null) {\n      config.batching = options.enableBatching;\n    }\n\n    if (options.batchSize != null) {\n      config.batchSize = options.batchSize;\n    }\n\n    const protocol = options.https === false ? 'http' : 'https';\n    const parsedHostname = url.parse(config.hostname);\n    config.hostname = `${protocol}://${parsedHostname.host}`;\n    this.tid = options.tid;\n    this.cid = options.cid || uuid.v4();\n    this.uid = options.uid;\n  }\n\n  public reset(): void {\n    this.context = {};\n  }\n\n  public set(key: string | number, value: any): void {\n    this.persistentParams[key] = value;\n  }\n\n  public async pageview(o: {\n    path: string;\n    hostname?: string;\n    title?: string;\n    params?: ArbitraryParams;\n    callback?: Callback;\n  }): Promise<Visitor> {\n    const pageviewParams = Object.assign({}, this.persistentParams, o.params);\n    pageviewParams.dp = o.path || this.context.dp;\n    pageviewParams.dh = o.hostname || this.context.dh;\n    pageviewParams.dt = o.title || this.context.dt;\n    const tidyParameters = this.tidyParameters(pageviewParams);\n    return this.withContext(o.params).enqueue(\n      MetricType.PAGEVIEW,\n      tidyParameters,\n      o.callback,\n    );\n  }\n\n  private getBody(params: ArbitraryParams | ArbitraryParamsBatch): string {\n    // @ts-ignore\n    return params.map(p => querystring.stringify(p)).join('\\n');\n  }\n\n  private getNextSendBatch(): ArbitraryParamsBatch {\n    const maxBatchSize = Math.min(this.queue.length, config.batchSize);\n    return this.queue.splice(0, maxBatchSize);\n  }\n\n  private getSendTaskQueue(): (ArbitraryParams | ArbitraryParamsBatch)[] {\n    if (!config.batching) {\n      return this.queue.splice(0, this.queue.length);\n    }\n\n    const q: ArbitraryParamsBatch[] = [];\n    const nBuckets = Math.ceil(this.queue.length / config.batchSize);\n    for (let i = 0; i < nBuckets; i++) {\n      q.push(this.getNextSendBatch());\n    }\n    return q.filter((bucket: ArbitraryParamsBatch) => bucket.length > 0);\n  }\n\n  public readonly send = async (\n    fn: Callback = () => undefined,\n  ): Promise<void> => {\n    const taskQueue = this.getSendTaskQueue();\n    debug('Sending %d tracking call(s)', taskQueue.length);\n    let count = 0;\n\n    try {\n      if (!taskQueue.length) {\n        fn.call(this, null, 0);\n        return;\n      }\n\n      const pathFragment = config.batching ? config.batchPath : config.path;\n      const path = `${config.hostname}${pathFragment}`;\n\n      const tasks = taskQueue.map(\n        task =>\n          new Promise((resolve, reject) => {\n            const options = Object.assign({}, this.options.requestOptions, {\n              body: this.getBody(task),\n              headers: this.options.headers || {},\n            });\n            request.post(path, options, err => {\n              if (err) reject(err);\n              count++;\n              debug('%d: %o', count, task);\n              resolve();\n            });\n          }),\n      );\n\n      await Promise.all(tasks);\n      debug('Finished sending tracking calls');\n      fn.call(this, null, count);\n    } catch (e) {\n      fn.call(this, e.message, count);\n    }\n  };\n\n  private enqueue(\n    t: MetricType,\n    p: ArbitraryParams = {},\n    fn?: Callback,\n  ): Visitor {\n    const params = this.translateParams(p);\n    const defaults = {\n      v: config.protocolVersion,\n      tid: this.tid,\n      cid: this.cid,\n      uid: this.uid,\n      t,\n    };\n    Object.assign(params, defaults);\n    this.queue.push(params);\n\n    if (debug.enabled) {\n      this.checkParameters(params);\n    }\n\n    debug('Enqueued %s (%o)', t, params);\n\n    if (fn) {\n      this.send(fn);\n    }\n\n    return this;\n  }\n\n  private withContext(context): Visitor {\n    const visitor = new Visitor(\n      this.options,\n      context,\n      this.persistentParams,\n      this.queue,\n    );\n    return visitor;\n  }\n\n  private translateParams(params: ArbitraryParams): ArbitraryParams {\n    var translated = {};\n    for (var key in params) {\n      if (config.parametersMap.hasOwnProperty(key)) {\n        translated[config.parametersMap[key]] = params[key];\n      } else {\n        translated[key] = params[key];\n      }\n    }\n    return translated;\n  }\n\n  private tidyParameters(params: ArbitraryParams): ArbitraryParams {\n    for (var param in params) {\n      if (params[param] === null || params[param] === undefined) {\n        delete params[param];\n      }\n    }\n    return params;\n  }\n\n  private checkParameters(params: ArbitraryParams) {\n    for (var param in params) {\n      if (\n        config.acceptedParameters.indexOf(param) !== -1 ||\n        config.acceptedParametersRegex.filter(function(r) {\n          return r.test(param);\n        }).length\n      ) {\n        continue;\n      }\n      debug(\n        'Warning! Unsupported tracking parameter %s (%s)',\n        param,\n        params[param],\n      );\n    }\n  }\n}\n\n// add to docs\n/*\n'visitor.debug() is deprecated: set DEBUG=universal-analytics to enable logging',\n\n\n\n*/\n"]}